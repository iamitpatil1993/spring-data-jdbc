/**
 * 
 */
package com.example.spring.data.jdbc.dao;

import java.util.HashMap;
import java.util.Map;

import javax.sql.DataSource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.jdbc.core.simple.SimpleJdbcInsertOperations;
import org.springframework.stereotype.Repository;

import com.example.spring.data.jdbc.dto.Actor;

/**
 * THis class makes use of SimpleJdbcInsert class of spring-data-jdbc to
 * simplify insert statements in jdbc. This internally uses DataBase metadata
 * from driver to fetch column details of table by table name, and internally
 * creates the insert statemenent using detected columns.
 * 
 * We just need to specify table to which we want to per form insert and map of
 * column and their data.
 * 
 * @author amit
 *
 */
@Repository
public class JdbcActorDao implements ActorDao {

	private static final Logger LOGGER = LoggerFactory.getLogger(JdbcActorDao.class);
	private SimpleJdbcInsertOperations simpleJdbcInsertOperations;
	private static final String TABLE_NAME_ACTOR = "actor";

	@Autowired
	public JdbcActorDao(DataSource dataSource) {
		// This simpleJdbcInsert class is thread-safe class, so we can reuse same
		// instance for all concurrent call to singleton dao instance.
		// Note: Here we are just passing table name, it will read table metadata and
		// creates insert statement automatically.
		// We can specify specific columns as well to be only considered during insert
			// statement using usingGeneratedKeyColumns()
		simpleJdbcInsertOperations = new SimpleJdbcInsert(dataSource)
				.withTableName(TABLE_NAME_ACTOR) // specify name of table
				.usingGeneratedKeyColumns("id"); // specify name of auto-generated pk column.
	}

	@Override
	public Actor add(Actor actor) {
		Map<String, String> insertValues = new HashMap<>(2);
		insertValues.put("first_name", actor.getFirstName());
		insertValues.put("last_name", actor.getLastName());
		
		Number autoGeneratedPk =  simpleJdbcInsertOperations.executeAndReturnKey(insertValues);
		actor.setId(autoGeneratedPk.longValue());
		LOGGER.info("Actor created using SimpleJdbcInsert with auto-generated pk :: {}", actor.getId());
		return actor;
	}
}
